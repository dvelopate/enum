C:37:"PHPUnit\Runner\DefaultTestResultCache":141555:{a:2:{s:7:"defects";a:494:{s:59:"Robier\Enum\Test\Unit\CharEnumTest::testCreatingEnumeration";i:5;s:61:"Robier\Enum\Test\Unit\StringEnumTest::testCreatingEnumeration";i:4;s:103:"Robier\Enum\Test\Unit\StringEnumTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #0";i:4;s:103:"Robier\Enum\Test\Unit\StringEnumTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #1";i:4;s:103:"Robier\Enum\Test\Unit\StringEnumTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #2";i:4;s:103:"Robier\Enum\Test\Unit\StringEnumTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #3";i:4;s:100:"Robier\Enum\Test\Unit\StaticFunctionCallingTest::testFailCreatingEnumViaNotExistingStaticConstructor";i:4;s:114:"Robier\Enum\Test\Unit\StaticFunctionCallingTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #4";i:4;s:114:"Robier\Enum\Test\Unit\StaticFunctionCallingTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #5";i:4;s:117:"Robier\Enum\Test\Unit\StaticFunctionCallingTest::testFailCreatingEnumViaNotExistingStaticConstructor with data set #2";i:3;s:106:"Robier\Enum\Test\Unit\StaticMethodsTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #6";i:4;s:106:"Robier\Enum\Test\Unit\StaticMethodsTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #7";i:4;s:106:"Robier\Enum\Test\Unit\StaticMethodsTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #8";i:4;s:66:"Robier\Enum\Test\Unit\GettersTest::testNameGetter with data set #6";i:4;s:66:"Robier\Enum\Test\Unit\GettersTest::testNameGetter with data set #7";i:4;s:66:"Robier\Enum\Test\Unit\GettersTest::testNameGetter with data set #8";i:4;s:117:"Robier\Enum\Test\Unit\StaticDynamicConstructorTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #6";i:4;s:117:"Robier\Enum\Test\Unit\StaticDynamicConstructorTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #7";i:4;s:117:"Robier\Enum\Test\Unit\StaticDynamicConstructorTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #8";i:4;s:102:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByNameFactory with data set #0";i:4;s:102:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByNameFactory with data set #1";i:3;s:102:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByNameFactory with data set #2";i:4;s:102:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByNameFactory with data set #3";i:3;s:102:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByNameFactory with data set #4";i:4;s:102:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByNameFactory with data set #5";i:3;s:102:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByNameFactory with data set #6";i:4;s:102:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByNameFactory with data set #7";i:4;s:102:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByNameFactory with data set #8";i:4;s:103:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByNameFactory with data set #0";i:4;s:103:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByNameFactory with data set #1";i:4;s:103:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByNameFactory with data set #2";i:4;s:103:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByNameFactory with data set #3";i:4;s:103:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByNameFactory with data set #4";i:4;s:103:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByNameFactory with data set #5";i:4;s:86:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByValueFactory";i:4;s:87:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByValueFactory";i:4;s:117:"Robier\Enum\Test\Unit\StaticDynamicConstructorTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #0";i:4;s:117:"Robier\Enum\Test\Unit\StaticDynamicConstructorTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #1";i:4;s:117:"Robier\Enum\Test\Unit\StaticDynamicConstructorTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #2";i:4;s:117:"Robier\Enum\Test\Unit\StaticDynamicConstructorTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #3";i:4;s:117:"Robier\Enum\Test\Unit\StaticDynamicConstructorTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #4";i:4;s:117:"Robier\Enum\Test\Unit\StaticDynamicConstructorTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #5";i:4;s:103:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByValueFactory with data set #0";i:3;s:103:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByValueFactory with data set #1";i:3;s:103:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByValueFactory with data set #2";i:4;s:103:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByValueFactory with data set #3";i:3;s:103:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByValueFactory with data set #4";i:3;s:103:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByValueFactory with data set #5";i:3;s:104:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByValueFactory with data set #0";i:4;s:104:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByValueFactory with data set #1";i:4;s:104:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByValueFactory with data set #2";i:4;s:104:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByValueFactory with data set #3";i:4;s:104:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByValueFactory with data set #4";i:4;s:104:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByValueFactory with data set #5";i:4;s:46:"Robier\Enum\Test\Unit\NameTest::testConversion";i:1;s:68:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "CAMEL"";i:4;s:69:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "PASCAL"";i:4;s:74:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "UPPER_SNAKE"";i:4;s:74:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "LOWER_SNAKE"";i:4;s:74:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "UPPER_KEBAB"";i:4;s:74:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "LOWER_KEBAB"";i:4;s:74:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "UPPER_SPACE"";i:4;s:74:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "LOWER_SPACE"";i:4;s:78:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "multiple spaces"";i:3;s:79:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "multiple minuses"";i:3;s:45:"Robier\Enum\Test\Unit\NameTest::testComparing";i:4;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithString with data set #0";i:3;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithString with data set #1";i:3;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithString with data set #2";i:3;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithString with data set #3";i:3;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithString with data set #4";i:3;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithString with data set #5";i:3;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithString with data set #6";i:3;s:7:"Warning";i:6;s:54:"Robier\Enum\Test\Unit\NameTest::testConvertingToString";i:4;s:73:"Robier\Enum\Test\Unit\NameTest::testInvalidNameResolving with data set #0";i:3;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithObject with data set #0";i:4;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithObject with data set #1";i:4;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithObject with data set #2";i:4;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithObject with data set #3";i:4;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithObject with data set #4";i:4;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithObject with data set #5";i:4;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithObject with data set #6";i:4;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithObject with data set #7";i:4;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithObject with data set #8";i:4;s:53:"Robier\Enum\Test\Unit\StringEnumTest::testNameFactory";i:4;s:71:"Robier\Enum\Test\Unit\StringEnumTest::testValueFactory with data set #0";i:6;s:71:"Robier\Enum\Test\Unit\StringEnumTest::testValueFactory with data set #1";i:6;s:73:"Robier\Enum\Test\Unit\StringEnumTest::testMagicFactories with data set #0";i:6;s:73:"Robier\Enum\Test\Unit\StringEnumTest::testMagicFactories with data set #1";i:6;s:70:"Robier\Enum\Test\Unit\StringEnumTest::testNameFactory with data set #0";i:6;s:70:"Robier\Enum\Test\Unit\StringEnumTest::testNameFactory with data set #1";i:6;s:67:"Robier\Enum\Test\Unit\StringEnumTest::testCheckers with data set #0";i:1;s:67:"Robier\Enum\Test\Unit\StringEnumTest::testCheckers with data set #1";i:1;s:57:"Robier\Enum\Test\Unit\StringEnumTest::testGettingAllNames";i:1;s:58:"Robier\Enum\Test\Unit\StringEnumTest::testGettingAllValues";i:1;s:64:"Robier\Enum\Test\Unit\StringEnumTest::testGettingAllEnumerations";i:1;s:65:"Robier\Enum\Test\Unit\StringEnumTest::testGettingSomeEnumerations";i:1;s:62:"Robier\Enum\Test\Unit\StringEnumTest::testIsAnyNotPassingCheck";i:1;s:67:"Robier\Enum\Test\Unit\StringEnumTest::testBadConstantValuesWillFail";i:1;s:66:"Robier\Enum\Test\Unit\StringEnumTest::testBadProvidedValueWillFail";i:1;s:80:"Robier\Enum\Test\Unit\StringEnumTest::testCallingNotExistingStaticMethodWillFail";i:1;s:79:"Robier\Enum\Test\Unit\IntegerEnumTest::testValidMagicFactories with data set #0";i:1;s:79:"Robier\Enum\Test\Unit\IntegerEnumTest::testValidMagicFactories with data set #1";i:1;s:79:"Robier\Enum\Test\Unit\IntegerEnumTest::testValidMagicFactories with data set #2";i:1;s:74:"Robier\Enum\Test\Unit\IntegerEnumTest::testDuplicateConstantValuesWillFail";i:1;s:67:"Robier\Enum\Test\Unit\IntegerEnumTest::testBadProvidedValueWillFail";i:1;s:100:"Robier\Enum\Test\Unit\IntegerEnumTest::testCallingNotExistingInstanceMethodWillFail with data set #0";i:1;s:100:"Robier\Enum\Test\Unit\IntegerEnumTest::testCallingNotExistingInstanceMethodWillFail with data set #1";i:1;s:74:"Robier\Enum\Test\Unit\InvalidEnumTest::testDuplicateConstantValuesWillFail";i:1;s:69:"Robier\Enum\Test\Unit\InvalidEnumTest::testNoConstantsDefinedWillFail";i:1;s:66:"Robier\Enum\Test\Unit\InvalidEnumTest::testBadProvidedNameWillFail";i:1;s:81:"Robier\Enum\Test\Unit\InvalidEnumTest::testCallingNotExistingStaticMethodWillFail";i:1;s:100:"Robier\Enum\Test\Unit\InvalidEnumTest::testCallingNotExistingInstanceMethodWillFail with data set #0";i:1;s:100:"Robier\Enum\Test\Unit\InvalidEnumTest::testCallingNotExistingInstanceMethodWillFail with data set #1";i:1;s:76:"Robier\Enum\Test\Unit\IntegerEnumTest::testValidNameFactory with data set #0";i:1;s:76:"Robier\Enum\Test\Unit\IntegerEnumTest::testValidNameFactory with data set #1";i:1;s:76:"Robier\Enum\Test\Unit\IntegerEnumTest::testValidNameFactory with data set #2";i:1;s:77:"Robier\Enum\Test\Unit\IntegerEnumTest::testValidValueFactory with data set #0";i:1;s:77:"Robier\Enum\Test\Unit\IntegerEnumTest::testValidValueFactory with data set #1";i:1;s:77:"Robier\Enum\Test\Unit\IntegerEnumTest::testValidValueFactory with data set #2";i:1;s:68:"Robier\Enum\Test\Unit\IntegerEnumTest::testCheckers with data set #0";i:1;s:68:"Robier\Enum\Test\Unit\IntegerEnumTest::testCheckers with data set #1";i:1;s:68:"Robier\Enum\Test\Unit\IntegerEnumTest::testCheckers with data set #2";i:1;s:58:"Robier\Enum\Test\Unit\IntegerEnumTest::testGettingAllNames";i:1;s:61:"Robier\Enum\Test\Unit\IntegerEnumTest::testConvertingToString";i:1;s:75:"Robier\Enum\Test\Unit\StringEnumTest::testValidNameFactory with data set #0";i:1;s:75:"Robier\Enum\Test\Unit\StringEnumTest::testValidNameFactory with data set #1";i:1;s:75:"Robier\Enum\Test\Unit\StringEnumTest::testValidNameFactory with data set #2";i:1;s:76:"Robier\Enum\Test\Unit\StringEnumTest::testValidValueFactory with data set #0";i:1;s:76:"Robier\Enum\Test\Unit\StringEnumTest::testValidValueFactory with data set #1";i:1;s:76:"Robier\Enum\Test\Unit\StringEnumTest::testValidValueFactory with data set #2";i:1;s:78:"Robier\Enum\Test\Unit\StringEnumTest::testValidMagicFactories with data set #0";i:1;s:78:"Robier\Enum\Test\Unit\StringEnumTest::testValidMagicFactories with data set #1";i:1;s:78:"Robier\Enum\Test\Unit\StringEnumTest::testValidMagicFactories with data set #2";i:1;s:67:"Robier\Enum\Test\Unit\StringEnumTest::testCheckers with data set #2";i:1;s:60:"Robier\Enum\Test\Unit\StringEnumTest::testConvertingToString";i:1;s:59:"Robier\Enum\Test\Unit\IntegerEnumTest::testGettingAllValues";i:1;s:65:"Robier\Enum\Test\Unit\IntegerEnumTest::testGettingAllEnumerations";i:1;s:66:"Robier\Enum\Test\Unit\IntegerEnumTest::testGettingSomeEnumerations";i:1;s:62:"Robier\Enum\Test\Unit\IntegerEnumTest::testIsEqualPassingCheck";i:1;s:65:"Robier\Enum\Test\Unit\IntegerEnumTest::testIsEqualNotPassingCheck";i:1;s:60:"Robier\Enum\Test\Unit\IntegerEnumTest::testIsAnyPassingCheck";i:1;s:63:"Robier\Enum\Test\Unit\IntegerEnumTest::testIsAnyNotPassingCheck";i:1;s:68:"Robier\Enum\Test\Unit\IntegerEnumTest::testBadConstantValuesWillFail";i:1;s:69:"Robier\Enum\Test\Unit\IntegerEnumTest::testNoConstantsDefinedWillFail";i:1;s:66:"Robier\Enum\Test\Unit\IntegerEnumTest::testBadProvidedNameWillFail";i:1;s:81:"Robier\Enum\Test\Unit\IntegerEnumTest::testCallingNotExistingStaticMethodWillFail";i:1;s:61:"Robier\Enum\Test\Unit\StringEnumTest::testIsEqualPassingCheck";i:1;s:64:"Robier\Enum\Test\Unit\StringEnumTest::testIsEqualNotPassingCheck";i:1;s:59:"Robier\Enum\Test\Unit\StringEnumTest::testIsAnyPassingCheck";i:1;s:73:"Robier\Enum\Test\Unit\StringEnumTest::testDuplicateConstantValuesWillFail";i:1;s:68:"Robier\Enum\Test\Unit\StringEnumTest::testNoConstantsDefinedWillFail";i:1;s:65:"Robier\Enum\Test\Unit\StringEnumTest::testBadProvidedNameWillFail";i:1;s:99:"Robier\Enum\Test\Unit\StringEnumTest::testCallingNotExistingInstanceMethodWillFail with data set #0";i:1;s:99:"Robier\Enum\Test\Unit\StringEnumTest::testCallingNotExistingInstanceMethodWillFail with data set #1";i:1;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testValidNameFactory with data set #8";i:4;s:75:"Robier\Enum\Test\Unit\ValidEnumTest::testValidValueFactory with data set #8";i:4;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllValues with data set #1";i:4;s:73:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllNames with data set #1";i:3;s:80:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllEnumerations with data set #1";i:4;s:81:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingSomeEnumerations with data set #0";i:4;s:81:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingSomeEnumerations with data set #1";i:4;s:80:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualNotPassingCheck with data set #0";i:4;s:80:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualNotPassingCheck with data set #1";i:4;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testIsAnyMethodPassing with data set #0";i:4;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testIsAnyMethodPassing with data set #1";i:4;s:80:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllEnumerations with data set #2";i:4;s:81:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingSomeEnumerations with data set #2";i:4;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllValues with data set #2";i:4;s:79:"Robier\Enum\Test\Unit\ValidEnumTest::testIsAnyMethodNotPassing with data set #0";i:4;s:79:"Robier\Enum\Test\Unit\ValidEnumTest::testIsAnyMethodNotPassing with data set #1";i:4;s:79:"Robier\Enum\Test\Unit\ValidEnumTest::testIsAnyMethodNotPassing with data set #2";i:4;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testRandomMethod with data set #0";i:4;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testRandomMethod with data set #1";i:4;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testRandomMethod with data set #2";i:4;s:102:"Robier\Enum\Test\Unit\ValidEnumTest::testItThrowsExceptionWhenUndefinedMethodIsCalled with data set #0";i:3;s:102:"Robier\Enum\Test\Unit\ValidEnumTest::testItThrowsExceptionWhenUndefinedMethodIsCalled with data set #1";i:3;s:102:"Robier\Enum\Test\Unit\ValidEnumTest::testItThrowsExceptionWhenUndefinedMethodIsCalled with data set #2";i:3;s:111:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedClassMethodIsCalled with data set #0";i:4;s:111:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedClassMethodIsCalled with data set #1";i:4;s:111:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedClassMethodIsCalled with data set #2";i:4;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testSameInstance with data set #0";i:4;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testSameInstance with data set #1";i:4;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testSameInstance with data set #2";i:4;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testSameInstance with data set #3";i:4;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testSameInstance with data set #4";i:4;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testSameInstance with data set #5";i:4;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testSameInstance with data set #6";i:4;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testSameInstance with data set #7";i:4;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testSameInstance with data set #8";i:4;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testConvertingToString with data set #0";i:4;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testConvertingToString with data set #1";i:4;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testConvertingToString with data set #2";i:4;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testConvertingToString with data set #3";i:4;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testConvertingToString with data set #4";i:4;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testConvertingToString with data set #5";i:4;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testConvertingToString with data set #6";i:4;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testConvertingToString with data set #7";i:4;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testConvertingToString with data set #8";i:4;s:114:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedInstanceMethodIsCalled with data set #0";i:4;s:114:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedInstanceMethodIsCalled with data set #1";i:4;s:114:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedInstanceMethodIsCalled with data set #2";i:4;s:114:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedInstanceMethodIsCalled with data set #3";i:4;s:114:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedInstanceMethodIsCalled with data set #4";i:4;s:114:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedInstanceMethodIsCalled with data set #5";i:4;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testValidNameFactory with data set #0";i:4;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testValidNameFactory with data set #1";i:4;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testValidNameFactory with data set #2";i:4;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testValidNameFactory with data set #3";i:4;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testValidNameFactory with data set #4";i:4;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testValidNameFactory with data set #5";i:4;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testValidNameFactory with data set #6";i:4;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testValidNameFactory with data set #7";i:4;s:75:"Robier\Enum\Test\Unit\ValidEnumTest::testValidValueFactory with data set #0";i:4;s:75:"Robier\Enum\Test\Unit\ValidEnumTest::testValidValueFactory with data set #1";i:4;s:75:"Robier\Enum\Test\Unit\ValidEnumTest::testValidValueFactory with data set #2";i:4;s:75:"Robier\Enum\Test\Unit\ValidEnumTest::testValidValueFactory with data set #3";i:4;s:75:"Robier\Enum\Test\Unit\ValidEnumTest::testValidValueFactory with data set #4";i:4;s:75:"Robier\Enum\Test\Unit\ValidEnumTest::testValidValueFactory with data set #5";i:4;s:75:"Robier\Enum\Test\Unit\ValidEnumTest::testValidValueFactory with data set #6";i:4;s:75:"Robier\Enum\Test\Unit\ValidEnumTest::testValidValueFactory with data set #7";i:4;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #0";i:4;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #1";i:4;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #2";i:4;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #3";i:4;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #4";i:4;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #5";i:4;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #6";i:4;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #7";i:4;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #8";i:4;s:66:"Robier\Enum\Test\Unit\ValidEnumTest::testCheckers with data set #0";i:4;s:66:"Robier\Enum\Test\Unit\ValidEnumTest::testCheckers with data set #1";i:4;s:66:"Robier\Enum\Test\Unit\ValidEnumTest::testCheckers with data set #2";i:4;s:66:"Robier\Enum\Test\Unit\ValidEnumTest::testCheckers with data set #3";i:4;s:66:"Robier\Enum\Test\Unit\ValidEnumTest::testCheckers with data set #4";i:4;s:66:"Robier\Enum\Test\Unit\ValidEnumTest::testCheckers with data set #5";i:4;s:66:"Robier\Enum\Test\Unit\ValidEnumTest::testCheckers with data set #6";i:4;s:66:"Robier\Enum\Test\Unit\ValidEnumTest::testCheckers with data set #7";i:4;s:66:"Robier\Enum\Test\Unit\ValidEnumTest::testCheckers with data set #8";i:4;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllValues with data set #0";i:4;s:73:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllNames with data set #0";i:3;s:73:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllNames with data set #2";i:3;s:82:"Robier\Enum\Test\Unit\ValidEnumTest::testItCanBeConvertedToString with data set #0";i:4;s:104:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenDuplicatedNameDefined with data set #0";i:5;s:104:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenDuplicatedNameDefined with data set #1";i:5;s:110:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumValueHasBadVariableType with data set #1";i:3;s:110:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumValueHasBadVariableType with data set #2";i:3;s:95:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItTrowsExceptionWhenMultipleCharValueSetInCharEnum";i:3;s:72:"Robier\Enum\Test\Unit\MaskEnumTest::testItWillCreateValidMaskEnumeration";i:4;s:93:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfEnumProvided with data set #0";i:4;s:80:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnFalseIfNotEnumProvided";i:4;s:93:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfEnumProvided with data set #1";i:4;s:93:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfEnumProvided with data set #2";i:4;s:93:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfEnumProvided with data set #3";i:4;s:93:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfEnumProvided with data set #4";i:4;s:93:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfEnumProvided with data set #5";i:4;s:93:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfEnumProvided with data set #6";i:4;s:97:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnFalseIfNotEnumProvided with data set #0";i:4;s:97:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnFalseIfNotEnumProvided with data set #1";i:4;s:91:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfClassHasAnHierarchyOfTraits";i:3;s:100:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnTrueIfEnumProvided with data set #0";i:6;s:100:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnTrueIfEnumProvided with data set #1";i:6;s:100:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnTrueIfEnumProvided with data set #2";i:6;s:100:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnTrueIfEnumProvided with data set #3";i:6;s:100:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnTrueIfEnumProvided with data set #4";i:6;s:100:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnTrueIfEnumProvided with data set #5";i:6;s:100:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnTrueIfEnumProvided with data set #6";i:6;s:100:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnTrueIfEnumProvided with data set #7";i:6;s:106:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnFalseIfEnumIsNotProvided with data set #0";i:6;s:106:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnFalseIfEnumIsNotProvided with data set #1";i:6;s:106:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnFalseIfEnumIsNotProvided with data set #2";i:6;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #0";i:3;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #1";i:3;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #2";i:3;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #3";i:3;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #4";i:3;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #5";i:3;s:115:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #1";i:3;s:115:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #0";i:4;s:103:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnTrueIfCharEnumProvided with data set #1";i:3;s:82:"Robier\Enum\Test\Unit\ValidEnumTest::testItCanBeConvertedToString with data set #1";i:4;s:82:"Robier\Enum\Test\Unit\ValidEnumTest::testItCanBeConvertedToString with data set #2";i:4;s:82:"Robier\Enum\Test\Unit\ValidEnumTest::testItCanBeConvertedToString with data set #3";i:4;s:82:"Robier\Enum\Test\Unit\ValidEnumTest::testItCanBeConvertedToString with data set #4";i:4;s:82:"Robier\Enum\Test\Unit\ValidEnumTest::testItCanBeConvertedToString with data set #5";i:4;s:82:"Robier\Enum\Test\Unit\ValidEnumTest::testItCanBeConvertedToString with data set #6";i:4;s:82:"Robier\Enum\Test\Unit\ValidEnumTest::testItCanBeConvertedToString with data set #7";i:4;s:82:"Robier\Enum\Test\Unit\ValidEnumTest::testItCanBeConvertedToString with data set #8";i:4;s:109:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnNullWhenInvalidEnumProvided with data set #0";i:3;s:109:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnNullWhenInvalidEnumProvided with data set #1";i:3;s:109:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnNullWhenInvalidEnumProvided with data set #2";i:3;s:132:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #7";i:4;s:101:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #1";i:4;s:109:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnTrueIfIntegerEnumProvided with data set #0";i:3;s:109:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnTrueIfIntegerEnumProvided with data set #1";i:3;s:136:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #7";i:4;s:130:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #7";i:4;s:134:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #7";i:4;s:115:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #2";i:4;s:115:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #3";i:4;s:115:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #4";i:4;s:115:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #5";i:4;s:115:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #6";i:3;s:115:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #8";i:4;s:116:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #10";i:3;s:103:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnTrueIfCharEnumProvided with data set #0";i:3;s:132:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #0";i:4;s:132:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #2";i:4;s:132:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #4";i:4;s:132:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #6";i:4;s:132:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #8";i:4;s:132:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #9";i:4;s:133:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #10";i:4;s:133:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #11";i:4;s:133:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #12";i:4;s:95:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnTrueIfEnumProvided with data set #0";i:4;s:95:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnTrueIfEnumProvided with data set #2";i:4;s:95:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnTrueIfEnumProvided with data set #4";i:4;s:95:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnTrueIfEnumProvided with data set #6";i:4;s:95:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnTrueIfEnumProvided with data set #8";i:4;s:95:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnTrueIfEnumProvided with data set #9";i:4;s:96:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnTrueIfEnumProvided with data set #10";i:4;s:96:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnTrueIfEnumProvided with data set #11";i:4;s:101:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #0";i:4;s:101:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #2";i:4;s:136:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #0";i:4;s:136:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #2";i:4;s:136:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #4";i:4;s:136:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #6";i:4;s:136:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #8";i:4;s:136:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #9";i:4;s:137:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #10";i:4;s:137:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #11";i:4;s:137:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #12";i:4;s:103:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnTrueIfMaskEnumProvided with data set #0";i:4;s:130:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #0";i:4;s:130:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #2";i:4;s:130:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #4";i:4;s:130:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #6";i:4;s:130:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #8";i:4;s:130:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #9";i:4;s:131:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #10";i:4;s:131:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #11";i:4;s:131:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #12";i:4;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnTrueIfStringEnumProvided with data set #0";i:4;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnTrueIfStringEnumProvided with data set #2";i:4;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnTrueIfStringEnumProvided with data set #3";i:4;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnTrueIfStringEnumProvided with data set #4";i:4;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnTrueIfStringEnumProvided with data set #5";i:4;s:134:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #0";i:3;s:134:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #2";i:4;s:134:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #4";i:4;s:134:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #6";i:4;s:134:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #8";i:4;s:99:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #0";i:3;s:99:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #1";i:3;s:99:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #2";i:3;s:99:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #3";i:3;s:99:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #4";i:3;s:99:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #5";i:3;s:99:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #6";i:3;s:99:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #7";i:3;s:99:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #8";i:3;s:101:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #0";i:3;s:101:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #1";i:3;s:101:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #2";i:3;s:101:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #3";i:3;s:101:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #4";i:3;s:101:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #5";i:3;s:101:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #6";i:3;s:101:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #7";i:3;s:101:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #8";i:3;s:95:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #9";i:3;s:96:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #10";i:3;s:96:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #11";i:3;s:99:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #9";i:3;s:100:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #10";i:3;s:100:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #11";i:3;s:108:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #9";i:4;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #10";i:4;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #11";i:3;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidValueProvidedToFactoryMethod with data set #9";i:4;s:110:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidValueProvidedToFactoryMethod with data set #10";i:4;s:110:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidValueProvidedToFactoryMethod with data set #11";i:4;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #9";i:4;s:110:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #10";i:4;s:110:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #11";i:3;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #9";i:4;s:78:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #10";i:4;s:78:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #11";i:3;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllValues with data set #3";i:3;s:73:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllNames with data set #3";i:4;s:80:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllEnumerations with data set #3";i:3;s:81:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingSomeEnumerations with data set #3";i:3;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testSameInstance with data set #9";i:3;s:71:"Robier\Enum\Test\Unit\ValidEnumTest::testSameInstance with data set #10";i:3;s:71:"Robier\Enum\Test\Unit\ValidEnumTest::testSameInstance with data set #11";i:3;s:82:"Robier\Enum\Test\Unit\ValidEnumTest::testItCanBeConvertedToString with data set #9";i:4;s:83:"Robier\Enum\Test\Unit\ValidEnumTest::testItCanBeConvertedToString with data set #10";i:4;s:83:"Robier\Enum\Test\Unit\ValidEnumTest::testItCanBeConvertedToString with data set #11";i:4;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testIsAnyMethodPassing with data set #3";i:4;s:79:"Robier\Enum\Test\Unit\ValidEnumTest::testIsAnyMethodNotPassing with data set #3";i:4;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testRandomMethod with data set #3";i:4;s:95:"Robier\Enum\Test\Unit\ValidEnumTest::testItReturnsAlwaysSameEnumObjectInstance with data set #9";i:3;s:96:"Robier\Enum\Test\Unit\ValidEnumTest::testItReturnsAlwaysSameEnumObjectInstance with data set #10";i:3;s:96:"Robier\Enum\Test\Unit\ValidEnumTest::testItReturnsAlwaysSameEnumObjectInstance with data set #11";i:3;s:98:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItReturnsFalseWhenEnumIsUnSerialized with data set #0";i:4;s:98:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItReturnsFalseWhenEnumIsUnSerialized with data set #1";i:4;s:98:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItReturnsFalseWhenEnumIsUnSerialized with data set #2";i:4;s:98:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItReturnsFalseWhenEnumIsUnSerialized with data set #3";i:4;s:98:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItReturnsFalseWhenEnumIsUnSerialized with data set #4";i:4;s:98:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItReturnsFalseWhenEnumIsUnSerialized with data set #5";i:4;s:98:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItReturnsFalseWhenEnumIsUnSerialized with data set #6";i:4;s:98:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItReturnsFalseWhenEnumIsUnSerialized with data set #7";i:4;s:98:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItReturnsFalseWhenEnumIsUnSerialized with data set #8";i:4;s:80:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllEnumerations with data set #0";i:4;s:95:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #0";i:3;s:95:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #1";i:3;s:95:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #2";i:3;s:95:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #3";i:3;s:95:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #4";i:3;s:95:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #5";i:3;s:95:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #6";i:3;s:95:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #7";i:3;s:95:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #8";i:3;s:108:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #0";i:4;s:108:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #1";i:4;s:108:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #2";i:4;s:108:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #3";i:4;s:108:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #4";i:4;s:108:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #5";i:4;s:108:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #6";i:4;s:108:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #7";i:4;s:108:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #8";i:4;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidValueProvidedToFactoryMethod with data set #0";i:4;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidValueProvidedToFactoryMethod with data set #1";i:4;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidValueProvidedToFactoryMethod with data set #2";i:4;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidValueProvidedToFactoryMethod with data set #3";i:4;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidValueProvidedToFactoryMethod with data set #4";i:4;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidValueProvidedToFactoryMethod with data set #5";i:4;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidValueProvidedToFactoryMethod with data set #6";i:4;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidValueProvidedToFactoryMethod with data set #7";i:4;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidValueProvidedToFactoryMethod with data set #8";i:4;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #0";i:4;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #1";i:4;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #2";i:4;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #3";i:4;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #4";i:4;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #5";i:4;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #6";i:4;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #7";i:4;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #8";i:4;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualPassingCheck with data set #0";i:4;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualPassingCheck with data set #1";i:4;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualPassingCheck with data set #2";i:4;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualPassingCheck with data set #3";i:4;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualPassingCheck with data set #4";i:4;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualPassingCheck with data set #5";i:4;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualPassingCheck with data set #6";i:4;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualPassingCheck with data set #7";i:4;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualPassingCheck with data set #8";i:4;s:80:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualNotPassingCheck with data set #2";i:4;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testIsAnyMethodPassing with data set #2";i:4;s:95:"Robier\Enum\Test\Unit\ValidEnumTest::testItReturnsAlwaysSameEnumObjectInstance with data set #0";i:4;s:95:"Robier\Enum\Test\Unit\ValidEnumTest::testItReturnsAlwaysSameEnumObjectInstance with data set #1";i:4;s:95:"Robier\Enum\Test\Unit\ValidEnumTest::testItReturnsAlwaysSameEnumObjectInstance with data set #2";i:4;s:95:"Robier\Enum\Test\Unit\ValidEnumTest::testItReturnsAlwaysSameEnumObjectInstance with data set #3";i:4;s:95:"Robier\Enum\Test\Unit\ValidEnumTest::testItReturnsAlwaysSameEnumObjectInstance with data set #4";i:4;s:95:"Robier\Enum\Test\Unit\ValidEnumTest::testItReturnsAlwaysSameEnumObjectInstance with data set #5";i:4;s:95:"Robier\Enum\Test\Unit\ValidEnumTest::testItReturnsAlwaysSameEnumObjectInstance with data set #6";i:4;s:95:"Robier\Enum\Test\Unit\ValidEnumTest::testItReturnsAlwaysSameEnumObjectInstance with data set #7";i:4;s:95:"Robier\Enum\Test\Unit\ValidEnumTest::testItReturnsAlwaysSameEnumObjectInstance with data set #8";i:4;s:96:"Robier\Enum\Test\Unit\MaskEnumTest::testItWillThrowExceptionOnInvalidNameProvidedToFactoryMethod";i:3;s:84:"Robier\Enum\Test\Unit\MaskEnumTest::testItWillCreateMaskEnumerationWhenNamesProvided";i:4;s:107:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenNoConstantsDefinedInEnum with data set #3";i:3;s:101:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #9";i:3;s:102:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #10";i:3;s:102:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #11";i:3;s:110:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenAllPossibilitiesAreExcluded with data set #9";i:3;s:111:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenAllPossibilitiesAreExcluded with data set #10";i:3;s:111:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenAllPossibilitiesAreExcluded with data set #11";i:3;s:114:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedInstanceMethodIsCalled with data set #6";i:3;s:114:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedInstanceMethodIsCalled with data set #7";i:3;s:89:"Robier\Enum\Test\Unit\MaskEnumTest::testItWillCreateMaskEnumerationWhenRandomMethodCalled";i:4;s:100:"Robier\Enum\Test\Unit\MaskEnumTest::testItWillCreateMaskEnumerationWhenRandomMethodCalledExceptValue";i:4;s:95:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItTrowsExceptionWhenInvalidValueProvidedToCharEnum";i:3;s:116:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #11";i:3;s:115:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #7";i:3;s:134:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #1";i:3;s:117:"Robier\Enum\Test\Unit\Functions\IsUnsignedIntegerEnumTest::testItWillReturnTrueIfIntegerEnumProvided with data set #0";i:3;s:117:"Robier\Enum\Test\Unit\Functions\IsUnsignedIntegerEnumTest::testItWillReturnTrueIfIntegerEnumProvided with data set #1";i:3;s:144:"Robier\Enum\Test\Unit\Functions\IsUnsignedIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #2";i:3;s:144:"Robier\Enum\Test\Unit\Functions\IsUnsignedIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #3";i:3;}s:5:"times";a:812:{s:59:"Robier\Enum\Test\Unit\CharEnumTest::testCreatingEnumeration";d:0.001;s:61:"Robier\Enum\Test\Unit\StringEnumTest::testCreatingEnumeration";d:0.002;s:90:"Robier\Enum\Test\Unit\StringEnumTest::testSuccessfullyCreatingEnumeration with data set #0";d:0.002;s:90:"Robier\Enum\Test\Unit\StringEnumTest::testSuccessfullyCreatingEnumeration with data set #1";d:0;s:103:"Robier\Enum\Test\Unit\StringEnumTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #0";d:0.002;s:103:"Robier\Enum\Test\Unit\StringEnumTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #1";d:0;s:103:"Robier\Enum\Test\Unit\StringEnumTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #2";d:0;s:103:"Robier\Enum\Test\Unit\StringEnumTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #3";d:0;s:114:"Robier\Enum\Test\Unit\StaticFunctionCallingTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #0";d:0.002;s:114:"Robier\Enum\Test\Unit\StaticFunctionCallingTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #1";d:0;s:114:"Robier\Enum\Test\Unit\StaticFunctionCallingTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #2";d:0;s:114:"Robier\Enum\Test\Unit\StaticFunctionCallingTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #3";d:0;s:100:"Robier\Enum\Test\Unit\StaticFunctionCallingTest::testFailCreatingEnumViaNotExistingStaticConstructor";d:0.001;s:117:"Robier\Enum\Test\Unit\StaticFunctionCallingTest::testFailCreatingEnumViaNotExistingStaticConstructor with data set #0";d:0.001;s:117:"Robier\Enum\Test\Unit\StaticFunctionCallingTest::testFailCreatingEnumViaNotExistingStaticConstructor with data set #1";d:0;s:114:"Robier\Enum\Test\Unit\StaticFunctionCallingTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #4";d:0;s:114:"Robier\Enum\Test\Unit\StaticFunctionCallingTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #5";d:0;s:117:"Robier\Enum\Test\Unit\StaticFunctionCallingTest::testFailCreatingEnumViaNotExistingStaticConstructor with data set #2";d:0;s:106:"Robier\Enum\Test\Unit\StaticMethodsTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #0";d:0.002;s:106:"Robier\Enum\Test\Unit\StaticMethodsTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #1";d:0;s:106:"Robier\Enum\Test\Unit\StaticMethodsTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #2";d:0;s:106:"Robier\Enum\Test\Unit\StaticMethodsTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #3";d:0;s:106:"Robier\Enum\Test\Unit\StaticMethodsTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #4";d:0.001;s:106:"Robier\Enum\Test\Unit\StaticMethodsTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #5";d:0;s:106:"Robier\Enum\Test\Unit\StaticMethodsTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #6";d:0.001;s:106:"Robier\Enum\Test\Unit\StaticMethodsTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #7";d:0;s:106:"Robier\Enum\Test\Unit\StaticMethodsTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #8";d:0;s:109:"Robier\Enum\Test\Unit\StaticMethodsTest::testFailCreatingEnumViaNotExistingStaticConstructor with data set #0";d:0;s:109:"Robier\Enum\Test\Unit\StaticMethodsTest::testFailCreatingEnumViaNotExistingStaticConstructor with data set #1";d:0;s:109:"Robier\Enum\Test\Unit\StaticMethodsTest::testFailCreatingEnumViaNotExistingStaticConstructor with data set #2";d:0;s:66:"Robier\Enum\Test\Unit\GettersTest::testNameGetter with data set #0";d:0.006;s:66:"Robier\Enum\Test\Unit\GettersTest::testNameGetter with data set #1";d:0.001;s:66:"Robier\Enum\Test\Unit\GettersTest::testNameGetter with data set #2";d:0.002;s:66:"Robier\Enum\Test\Unit\GettersTest::testNameGetter with data set #3";d:0.001;s:66:"Robier\Enum\Test\Unit\GettersTest::testNameGetter with data set #4";d:0.003;s:66:"Robier\Enum\Test\Unit\GettersTest::testNameGetter with data set #5";d:0.001;s:66:"Robier\Enum\Test\Unit\GettersTest::testNameGetter with data set #6";d:0.003;s:66:"Robier\Enum\Test\Unit\GettersTest::testNameGetter with data set #7";d:0.001;s:66:"Robier\Enum\Test\Unit\GettersTest::testNameGetter with data set #8";d:0.001;s:67:"Robier\Enum\Test\Unit\GettersTest::testValueGetter with data set #0";d:0.001;s:67:"Robier\Enum\Test\Unit\GettersTest::testValueGetter with data set #1";d:0.001;s:67:"Robier\Enum\Test\Unit\GettersTest::testValueGetter with data set #2";d:0.001;s:67:"Robier\Enum\Test\Unit\GettersTest::testValueGetter with data set #3";d:0.001;s:67:"Robier\Enum\Test\Unit\GettersTest::testValueGetter with data set #4";d:0.001;s:67:"Robier\Enum\Test\Unit\GettersTest::testValueGetter with data set #5";d:0.001;s:67:"Robier\Enum\Test\Unit\GettersTest::testValueGetter with data set #6";d:0.001;s:67:"Robier\Enum\Test\Unit\GettersTest::testValueGetter with data set #7";d:0.001;s:67:"Robier\Enum\Test\Unit\GettersTest::testValueGetter with data set #8";d:0.001;s:117:"Robier\Enum\Test\Unit\StaticDynamicConstructorTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #0";d:0.001;s:117:"Robier\Enum\Test\Unit\StaticDynamicConstructorTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #1";d:0;s:117:"Robier\Enum\Test\Unit\StaticDynamicConstructorTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #2";d:0;s:117:"Robier\Enum\Test\Unit\StaticDynamicConstructorTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #3";d:0;s:117:"Robier\Enum\Test\Unit\StaticDynamicConstructorTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #4";d:0;s:117:"Robier\Enum\Test\Unit\StaticDynamicConstructorTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #5";d:0;s:117:"Robier\Enum\Test\Unit\StaticDynamicConstructorTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #6";d:0.002;s:117:"Robier\Enum\Test\Unit\StaticDynamicConstructorTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #7";d:0.002;s:117:"Robier\Enum\Test\Unit\StaticDynamicConstructorTest::testSuccessfullyCreatingEnumViaStaticConstructor with data set #8";d:0.001;s:120:"Robier\Enum\Test\Unit\StaticDynamicConstructorTest::testFailCreatingEnumViaNotExistingStaticConstructor with data set #0";d:0;s:120:"Robier\Enum\Test\Unit\StaticDynamicConstructorTest::testFailCreatingEnumViaNotExistingStaticConstructor with data set #1";d:0;s:120:"Robier\Enum\Test\Unit\StaticDynamicConstructorTest::testFailCreatingEnumViaNotExistingStaticConstructor with data set #2";d:0;s:102:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByNameFactory with data set #0";d:0.007;s:102:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByNameFactory with data set #1";d:0.002;s:102:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByNameFactory with data set #2";d:0.002;s:102:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByNameFactory with data set #3";d:0.004;s:102:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByNameFactory with data set #4";d:0.002;s:102:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByNameFactory with data set #5";d:0.003;s:102:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByNameFactory with data set #6";d:0.003;s:102:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByNameFactory with data set #7";d:0.002;s:102:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByNameFactory with data set #8";d:0.003;s:103:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByNameFactory with data set #0";d:0.002;s:103:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByNameFactory with data set #1";d:0.002;s:103:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByNameFactory with data set #2";d:0.003;s:103:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByNameFactory with data set #3";d:0.002;s:103:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByNameFactory with data set #4";d:0.003;s:103:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByNameFactory with data set #5";d:0.002;s:103:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByNameFactory with data set #6";d:0.002;s:103:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByNameFactory with data set #7";d:0.002;s:103:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByNameFactory with data set #8";d:0.002;s:86:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByValueFactory";d:0.002;s:87:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByValueFactory";d:0.001;s:103:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByValueFactory with data set #0";d:0.003;s:103:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByValueFactory with data set #1";d:0.002;s:103:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByValueFactory with data set #2";d:0.002;s:103:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByValueFactory with data set #3";d:0.003;s:103:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByValueFactory with data set #4";d:0.002;s:103:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByValueFactory with data set #5";d:0.003;s:104:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByValueFactory with data set #0";d:0.002;s:104:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByValueFactory with data set #1";d:0.002;s:104:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByValueFactory with data set #2";d:0.002;s:104:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByValueFactory with data set #3";d:0.002;s:104:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByValueFactory with data set #4";d:0.003;s:104:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByValueFactory with data set #5";d:0.002;s:103:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByValueFactory with data set #6";d:0.002;s:103:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByValueFactory with data set #7";d:0.002;s:104:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByValueFactory with data set #6";d:0.002;s:104:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByValueFactory with data set #7";d:0.002;s:102:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByNameFactory with data set #9";d:0.002;s:103:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByNameFactory with data set #9";d:0.003;s:103:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByValueFactory with data set #8";d:0.002;s:103:"Robier\Enum\Test\Unit\GettersTest::testNameGetterWhenEnumConstructedWithByValueFactory with data set #9";d:0.002;s:104:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByValueFactory with data set #8";d:0.002;s:104:"Robier\Enum\Test\Unit\GettersTest::testValueGetterWhenEnumConstructedWithByValueFactory with data set #9";d:0.002;s:46:"Robier\Enum\Test\Unit\NameTest::testConversion";d:0.014;s:68:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "CAMEL"";d:0.004;s:69:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "PASCAL"";d:0.001;s:74:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "UPPER_SNAKE"";d:0.001;s:74:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "LOWER_SNAKE"";d:0.002;s:74:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "UPPER_KEBAB"";d:0.001;s:74:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "LOWER_KEBAB"";d:0.001;s:74:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "UPPER_SPACE"";d:0.001;s:74:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "LOWER_SPACE"";d:0.002;s:73:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "CAMEL_CASE"";d:0.004;s:74:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "PASCAL_CASE"";d:0.001;s:79:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "UPPER_SNAKE_CASE"";d:0.001;s:79:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "LOWER_SNAKE_CASE"";d:0.001;s:79:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "UPPER_KEBAB_CASE"";d:0.001;s:79:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "LOWER_KEBAB_CASE"";d:0.001;s:79:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "UPPER_SPACE_CASE"";d:0.001;s:79:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "LOWER_SPACE_CASE"";d:0.001;s:78:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "multiple spaces"";d:0.001;s:79:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "multiple minuses"";d:0.001;s:83:"Robier\Enum\Test\Unit\NameTest::testConversion with data set "multiple underscores"";d:0.001;s:76:"Robier\Enum\Test\Unit\NameTest::testCaseResolving with data set "CAMEL_CASE"";d:0;s:77:"Robier\Enum\Test\Unit\NameTest::testCaseResolving with data set "PASCAL_CASE"";d:0;s:82:"Robier\Enum\Test\Unit\NameTest::testCaseResolving with data set "UPPER_SNAKE_CASE"";d:0;s:82:"Robier\Enum\Test\Unit\NameTest::testCaseResolving with data set "LOWER_SNAKE_CASE"";d:0;s:82:"Robier\Enum\Test\Unit\NameTest::testCaseResolving with data set "UPPER_KEBAB_CASE"";d:0;s:82:"Robier\Enum\Test\Unit\NameTest::testCaseResolving with data set "LOWER_KEBAB_CASE"";d:0;s:82:"Robier\Enum\Test\Unit\NameTest::testCaseResolving with data set "UPPER_SPACE_CASE"";d:0;s:82:"Robier\Enum\Test\Unit\NameTest::testCaseResolving with data set "LOWER_SPACE_CASE"";d:0;s:81:"Robier\Enum\Test\Unit\NameTest::testCaseResolving with data set "multiple spaces"";d:0;s:82:"Robier\Enum\Test\Unit\NameTest::testCaseResolving with data set "multiple minuses"";d:0;s:86:"Robier\Enum\Test\Unit\NameTest::testCaseResolving with data set "multiple underscores"";d:0;s:45:"Robier\Enum\Test\Unit\NameTest::testComparing";d:0.002;s:62:"Robier\Enum\Test\Unit\NameTest::testComparing with data set #0";d:0.001;s:62:"Robier\Enum\Test\Unit\NameTest::testComparing with data set #1";d:0.001;s:62:"Robier\Enum\Test\Unit\NameTest::testComparing with data set #2";d:0.001;s:62:"Robier\Enum\Test\Unit\NameTest::testComparing with data set #3";d:0.001;s:62:"Robier\Enum\Test\Unit\NameTest::testComparing with data set #4";d:0.001;s:62:"Robier\Enum\Test\Unit\NameTest::testComparing with data set #5";d:0.001;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithObject with data set #0";d:0;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithObject with data set #1";d:0;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithObject with data set #2";d:0;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithObject with data set #3";d:0;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithObject with data set #4";d:0;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithObject with data set #5";d:0;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithObject with data set #6";d:0;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithString with data set #0";d:0;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithString with data set #1";d:0;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithString with data set #2";d:0;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithString with data set #3";d:0;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithString with data set #4";d:0;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithString with data set #5";d:0;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithString with data set #6";d:0;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithObject with data set #7";d:0;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithObject with data set #8";d:0;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithString with data set #7";d:0;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithString with data set #8";d:0;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithObject with data set #9";d:0.001;s:76:"Robier\Enum\Test\Unit\NameTest::testComparingNameWithString with data set #9";d:0.001;s:7:"Warning";d:0;s:57:"Robier\Enum\Test\Unit\NameTest::testKita with data set #0";d:0.004;s:57:"Robier\Enum\Test\Unit\NameTest::testKita with data set #1";d:0.003;s:54:"Robier\Enum\Test\Unit\NameTest::testConvertingToString";d:0.003;s:83:"Robier\Enum\Test\Unit\NameTest::testConvertingMethods with data set "one word name"";d:0;s:89:"Robier\Enum\Test\Unit\NameTest::testConvertingMethods with data set "multiple words name"";d:0;s:84:"Robier\Enum\Test\Unit\NameTest::testConvertingToString with data set "one word name"";d:0;s:90:"Robier\Enum\Test\Unit\NameTest::testConvertingToString with data set "multiple words name"";d:0;s:73:"Robier\Enum\Test\Unit\NameTest::testInvalidNameResolving with data set #0";d:0;s:103:"Robier\Enum\Test\Unit\NameTest::testConvertingToString with data set "multiple words name with numbers"";d:0;s:102:"Robier\Enum\Test\Unit\NameTest::testConvertingMethods with data set "multiple words name with numbers"";d:0;s:53:"Robier\Enum\Test\Unit\StringEnumTest::testNameFactory";d:0;s:70:"Robier\Enum\Test\Unit\StringEnumTest::testNameFactory with data set #0";d:0.004;s:70:"Robier\Enum\Test\Unit\StringEnumTest::testNameFactory with data set #1";d:0.003;s:71:"Robier\Enum\Test\Unit\StringEnumTest::testValueFactory with data set #0";d:0.003;s:71:"Robier\Enum\Test\Unit\StringEnumTest::testValueFactory with data set #1";d:0.003;s:73:"Robier\Enum\Test\Unit\StringEnumTest::testMagicFactories with data set #0";d:0.003;s:73:"Robier\Enum\Test\Unit\StringEnumTest::testMagicFactories with data set #1";d:0.003;s:67:"Robier\Enum\Test\Unit\StringEnumTest::testCheckers with data set #0";d:0.001;s:67:"Robier\Enum\Test\Unit\StringEnumTest::testCheckers with data set #1";d:0.001;s:58:"Robier\Enum\Test\Unit\StringEnumTest::testGettingAllValues";d:0.001;s:57:"Robier\Enum\Test\Unit\StringEnumTest::testGettingAllNames";d:0.001;s:64:"Robier\Enum\Test\Unit\StringEnumTest::testGettingAllEnumerations";d:0.001;s:65:"Robier\Enum\Test\Unit\StringEnumTest::testGettingSomeEnumerations";d:0.001;s:54:"Robier\Enum\Test\Unit\StringEnumTest::testIsEqualCheck";d:0.002;s:57:"Robier\Enum\Test\Unit\StringEnumTest::testIsNotEqualCheck";d:0.001;s:60:"Robier\Enum\Test\Unit\StringEnumTest::testConvertingToString";d:0.002;s:61:"Robier\Enum\Test\Unit\StringEnumTest::testIsEqualPassingCheck";d:0.001;s:64:"Robier\Enum\Test\Unit\StringEnumTest::testIsEqualNotPassingCheck";d:0.001;s:59:"Robier\Enum\Test\Unit\StringEnumTest::testIsAnyPassingCheck";d:0.001;s:62:"Robier\Enum\Test\Unit\StringEnumTest::testIsAnyNotPassingCheck";d:0.001;s:73:"Robier\Enum\Test\Unit\StringEnumTest::testDuplicateConstantValuesWillFail";d:0.001;s:67:"Robier\Enum\Test\Unit\StringEnumTest::testBadConstantValuesWillFail";d:0.001;s:68:"Robier\Enum\Test\Unit\StringEnumTest::testNoConstantsDefinedWillFail";d:0.001;s:66:"Robier\Enum\Test\Unit\StringEnumTest::testBadProvidedValueWillFail";d:0.001;s:80:"Robier\Enum\Test\Unit\StringEnumTest::testCallingNotExistingStaticMethodWillFail";d:0.001;s:65:"Robier\Enum\Test\Unit\StringEnumTest::testBadProvidedNameWillFail";d:0.001;s:99:"Robier\Enum\Test\Unit\StringEnumTest::testCallingNotExistingInstanceMethodWillFail with data set #0";d:0.001;s:99:"Robier\Enum\Test\Unit\StringEnumTest::testCallingNotExistingInstanceMethodWillFail with data set #1";d:0.001;s:75:"Robier\Enum\Test\Unit\StringEnumTest::testValidNameFactory with data set #0";d:0.001;s:75:"Robier\Enum\Test\Unit\StringEnumTest::testValidNameFactory with data set #1";d:0.001;s:76:"Robier\Enum\Test\Unit\StringEnumTest::testValidValueFactory with data set #0";d:0.001;s:76:"Robier\Enum\Test\Unit\StringEnumTest::testValidValueFactory with data set #1";d:0.001;s:78:"Robier\Enum\Test\Unit\StringEnumTest::testValidMagicFactories with data set #0";d:0.001;s:78:"Robier\Enum\Test\Unit\StringEnumTest::testValidMagicFactories with data set #1";d:0.001;s:76:"Robier\Enum\Test\Unit\IntegerEnumTest::testValidNameFactory with data set #0";d:0.005;s:76:"Robier\Enum\Test\Unit\IntegerEnumTest::testValidNameFactory with data set #1";d:0.001;s:76:"Robier\Enum\Test\Unit\IntegerEnumTest::testValidNameFactory with data set #2";d:0.001;s:77:"Robier\Enum\Test\Unit\IntegerEnumTest::testValidValueFactory with data set #0";d:0.001;s:77:"Robier\Enum\Test\Unit\IntegerEnumTest::testValidValueFactory with data set #1";d:0.002;s:77:"Robier\Enum\Test\Unit\IntegerEnumTest::testValidValueFactory with data set #2";d:0.001;s:79:"Robier\Enum\Test\Unit\IntegerEnumTest::testValidMagicFactories with data set #0";d:0.001;s:79:"Robier\Enum\Test\Unit\IntegerEnumTest::testValidMagicFactories with data set #1";d:0.001;s:79:"Robier\Enum\Test\Unit\IntegerEnumTest::testValidMagicFactories with data set #2";d:0.002;s:68:"Robier\Enum\Test\Unit\IntegerEnumTest::testCheckers with data set #0";d:0.001;s:68:"Robier\Enum\Test\Unit\IntegerEnumTest::testCheckers with data set #1";d:0.001;s:68:"Robier\Enum\Test\Unit\IntegerEnumTest::testCheckers with data set #2";d:0.002;s:59:"Robier\Enum\Test\Unit\IntegerEnumTest::testGettingAllValues";d:0.001;s:58:"Robier\Enum\Test\Unit\IntegerEnumTest::testGettingAllNames";d:0.001;s:65:"Robier\Enum\Test\Unit\IntegerEnumTest::testGettingAllEnumerations";d:0.001;s:66:"Robier\Enum\Test\Unit\IntegerEnumTest::testGettingSomeEnumerations";d:0.001;s:62:"Robier\Enum\Test\Unit\IntegerEnumTest::testIsEqualPassingCheck";d:0.001;s:65:"Robier\Enum\Test\Unit\IntegerEnumTest::testIsEqualNotPassingCheck";d:0.002;s:61:"Robier\Enum\Test\Unit\IntegerEnumTest::testConvertingToString";d:0.001;s:60:"Robier\Enum\Test\Unit\IntegerEnumTest::testIsAnyPassingCheck";d:0.001;s:63:"Robier\Enum\Test\Unit\IntegerEnumTest::testIsAnyNotPassingCheck";d:0.002;s:74:"Robier\Enum\Test\Unit\IntegerEnumTest::testDuplicateConstantValuesWillFail";d:0.001;s:68:"Robier\Enum\Test\Unit\IntegerEnumTest::testBadConstantValuesWillFail";d:0.001;s:69:"Robier\Enum\Test\Unit\IntegerEnumTest::testNoConstantsDefinedWillFail";d:0.001;s:67:"Robier\Enum\Test\Unit\IntegerEnumTest::testBadProvidedValueWillFail";d:0.001;s:66:"Robier\Enum\Test\Unit\IntegerEnumTest::testBadProvidedNameWillFail";d:0.001;s:81:"Robier\Enum\Test\Unit\IntegerEnumTest::testCallingNotExistingStaticMethodWillFail";d:0.001;s:100:"Robier\Enum\Test\Unit\IntegerEnumTest::testCallingNotExistingInstanceMethodWillFail with data set #0";d:0.001;s:100:"Robier\Enum\Test\Unit\IntegerEnumTest::testCallingNotExistingInstanceMethodWillFail with data set #1";d:0.001;s:75:"Robier\Enum\Test\Unit\StringEnumTest::testValidNameFactory with data set #2";d:0.001;s:76:"Robier\Enum\Test\Unit\StringEnumTest::testValidValueFactory with data set #2";d:0.001;s:78:"Robier\Enum\Test\Unit\StringEnumTest::testValidMagicFactories with data set #2";d:0.001;s:67:"Robier\Enum\Test\Unit\StringEnumTest::testCheckers with data set #2";d:0.001;s:74:"Robier\Enum\Test\Unit\InvalidEnumTest::testDuplicateConstantValuesWillFail";d:0.001;s:69:"Robier\Enum\Test\Unit\InvalidEnumTest::testNoConstantsDefinedWillFail";d:0.001;s:66:"Robier\Enum\Test\Unit\InvalidEnumTest::testBadProvidedNameWillFail";d:0.001;s:81:"Robier\Enum\Test\Unit\InvalidEnumTest::testCallingNotExistingStaticMethodWillFail";d:0.001;s:100:"Robier\Enum\Test\Unit\InvalidEnumTest::testCallingNotExistingInstanceMethodWillFail with data set #0";d:0.001;s:100:"Robier\Enum\Test\Unit\InvalidEnumTest::testCallingNotExistingInstanceMethodWillFail with data set #1";d:0.001;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testValidNameFactory with data set #0";d:0.022;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testValidNameFactory with data set #1";d:0.022;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testValidNameFactory with data set #2";d:0.022;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testValidNameFactory with data set #3";d:0.022;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testValidNameFactory with data set #4";d:0.022;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testValidNameFactory with data set #5";d:0.023;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testValidNameFactory with data set #6";d:0.022;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testValidNameFactory with data set #7";d:0.023;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testValidNameFactory with data set #8";d:0.023;s:75:"Robier\Enum\Test\Unit\ValidEnumTest::testValidValueFactory with data set #0";d:0.022;s:75:"Robier\Enum\Test\Unit\ValidEnumTest::testValidValueFactory with data set #1";d:0.022;s:75:"Robier\Enum\Test\Unit\ValidEnumTest::testValidValueFactory with data set #2";d:0.022;s:75:"Robier\Enum\Test\Unit\ValidEnumTest::testValidValueFactory with data set #3";d:0.022;s:75:"Robier\Enum\Test\Unit\ValidEnumTest::testValidValueFactory with data set #4";d:0.023;s:75:"Robier\Enum\Test\Unit\ValidEnumTest::testValidValueFactory with data set #5";d:0.022;s:75:"Robier\Enum\Test\Unit\ValidEnumTest::testValidValueFactory with data set #6";d:0.022;s:75:"Robier\Enum\Test\Unit\ValidEnumTest::testValidValueFactory with data set #7";d:0.023;s:75:"Robier\Enum\Test\Unit\ValidEnumTest::testValidValueFactory with data set #8";d:0.022;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #0";d:0.003;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #1";d:0.003;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #2";d:0.003;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #3";d:0.003;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #4";d:0.003;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #5";d:0.003;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #6";d:0.003;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #7";d:0.003;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #8";d:0.003;s:66:"Robier\Enum\Test\Unit\ValidEnumTest::testCheckers with data set #0";d:0.003;s:66:"Robier\Enum\Test\Unit\ValidEnumTest::testCheckers with data set #1";d:0.003;s:66:"Robier\Enum\Test\Unit\ValidEnumTest::testCheckers with data set #2";d:0.003;s:66:"Robier\Enum\Test\Unit\ValidEnumTest::testCheckers with data set #3";d:0.003;s:66:"Robier\Enum\Test\Unit\ValidEnumTest::testCheckers with data set #4";d:0.003;s:66:"Robier\Enum\Test\Unit\ValidEnumTest::testCheckers with data set #5";d:0.003;s:66:"Robier\Enum\Test\Unit\ValidEnumTest::testCheckers with data set #6";d:0.003;s:66:"Robier\Enum\Test\Unit\ValidEnumTest::testCheckers with data set #7";d:0.003;s:66:"Robier\Enum\Test\Unit\ValidEnumTest::testCheckers with data set #8";d:0.003;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllValues with data set #0";d:0.003;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllValues with data set #1";d:0.003;s:73:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllNames with data set #0";d:0.004;s:73:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllNames with data set #1";d:0.005;s:80:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllEnumerations with data set #0";d:0.003;s:80:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllEnumerations with data set #1";d:0.003;s:81:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingSomeEnumerations with data set #0";d:0.003;s:81:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingSomeEnumerations with data set #1";d:0.003;s:80:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualNotPassingCheck with data set #0";d:0.003;s:80:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualNotPassingCheck with data set #1";d:0.003;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testIsAnyMethodPassing with data set #0";d:0.003;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testIsAnyMethodPassing with data set #1";d:0.003;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualPassingCheck with data set #0";d:0.003;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualPassingCheck with data set #1";d:0.003;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualPassingCheck with data set #2";d:0.003;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualPassingCheck with data set #3";d:0.003;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualPassingCheck with data set #4";d:0.003;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualPassingCheck with data set #5";d:0.003;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualPassingCheck with data set #6";d:0.003;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualPassingCheck with data set #7";d:0.003;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualPassingCheck with data set #8";d:0.003;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testSameInstance with data set #0";d:0.003;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testSameInstance with data set #1";d:0.003;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testSameInstance with data set #2";d:0.003;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testSameInstance with data set #3";d:0.003;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testSameInstance with data set #4";d:0.003;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testSameInstance with data set #5";d:0.003;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testSameInstance with data set #6";d:0.003;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testSameInstance with data set #7";d:0.003;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testSameInstance with data set #8";d:0.003;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testConvertingToString with data set #0";d:0;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testConvertingToString with data set #1";d:0;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testConvertingToString with data set #2";d:0;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testConvertingToString with data set #3";d:0;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testConvertingToString with data set #4";d:0;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testConvertingToString with data set #5";d:0;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testConvertingToString with data set #6";d:0;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testConvertingToString with data set #7";d:0;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testConvertingToString with data set #8";d:0;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testIsAnyMethodPassing with data set #2";d:0.003;s:80:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllEnumerations with data set #2";d:0.003;s:81:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingSomeEnumerations with data set #2";d:0.003;s:80:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualNotPassingCheck with data set #2";d:0.003;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllValues with data set #2";d:0.003;s:73:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllNames with data set #2";d:0.004;s:79:"Robier\Enum\Test\Unit\ValidEnumTest::testIsAnyMethodNotPassing with data set #0";d:0.003;s:79:"Robier\Enum\Test\Unit\ValidEnumTest::testIsAnyMethodNotPassing with data set #1";d:0.003;s:79:"Robier\Enum\Test\Unit\ValidEnumTest::testIsAnyMethodNotPassing with data set #2";d:0.003;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testRandomMethod with data set #0";d:0.003;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testRandomMethod with data set #1";d:0.003;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testRandomMethod with data set #2";d:0.003;s:102:"Robier\Enum\Test\Unit\ValidEnumTest::testItThrowsExceptionWhenUndefinedMethodIsCalled with data set #0";d:0.001;s:102:"Robier\Enum\Test\Unit\ValidEnumTest::testItThrowsExceptionWhenUndefinedMethodIsCalled with data set #1";d:0;s:102:"Robier\Enum\Test\Unit\ValidEnumTest::testItThrowsExceptionWhenUndefinedMethodIsCalled with data set #2";d:0.001;s:110:"Robier\Enum\Test\Unit\ValidEnumTest::testItThrowsExceptionWhenUndefinedInstanceMethodIsCalled with data set #0";d:0.002;s:110:"Robier\Enum\Test\Unit\ValidEnumTest::testItThrowsExceptionWhenUndefinedInstanceMethodIsCalled with data set #1";d:0.002;s:110:"Robier\Enum\Test\Unit\ValidEnumTest::testItThrowsExceptionWhenUndefinedInstanceMethodIsCalled with data set #2";d:0.002;s:107:"Robier\Enum\Test\Unit\ValidEnumTest::testItThrowsExceptionWhenUndefinedClassMethodIsCalled with data set #0";d:0.002;s:107:"Robier\Enum\Test\Unit\ValidEnumTest::testItThrowsExceptionWhenUndefinedClassMethodIsCalled with data set #1";d:0.002;s:107:"Robier\Enum\Test\Unit\ValidEnumTest::testItThrowsExceptionWhenUndefinedClassMethodIsCalled with data set #2";d:0.002;s:114:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedInstanceMethodIsCalled with data set #0";d:0.002;s:114:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedInstanceMethodIsCalled with data set #1";d:0;s:114:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedInstanceMethodIsCalled with data set #2";d:0;s:111:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedClassMethodIsCalled with data set #0";d:0;s:111:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedClassMethodIsCalled with data set #1";d:0;s:111:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedClassMethodIsCalled with data set #2";d:0;s:119:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedValueProvidedToValueFactory with data set #0";d:0;s:119:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedValueProvidedToValueFactory with data set #1";d:0;s:119:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedValueProvidedToValueFactory with data set #2";d:0;s:117:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedNameProvidedToNameFactory with data set #0";d:0;s:117:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedNameProvidedToNameFactory with data set #1";d:0;s:117:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedNameProvidedToNameFactory with data set #2";d:0;s:114:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedInstanceMethodIsCalled with data set #3";d:0.001;s:114:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedInstanceMethodIsCalled with data set #4";d:0;s:114:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedInstanceMethodIsCalled with data set #5";d:0;s:82:"Robier\Enum\Test\Unit\ValidEnumTest::testItCanBeConvertedToString with data set #0";d:0.003;s:82:"Robier\Enum\Test\Unit\ValidEnumTest::testItCanBeConvertedToString with data set #1";d:0.003;s:82:"Robier\Enum\Test\Unit\ValidEnumTest::testItCanBeConvertedToString with data set #2";d:0.003;s:82:"Robier\Enum\Test\Unit\ValidEnumTest::testItCanBeConvertedToString with data set #3";d:0.003;s:82:"Robier\Enum\Test\Unit\ValidEnumTest::testItCanBeConvertedToString with data set #4";d:0.003;s:82:"Robier\Enum\Test\Unit\ValidEnumTest::testItCanBeConvertedToString with data set #5";d:0.003;s:82:"Robier\Enum\Test\Unit\ValidEnumTest::testItCanBeConvertedToString with data set #6";d:0.003;s:82:"Robier\Enum\Test\Unit\ValidEnumTest::testItCanBeConvertedToString with data set #7";d:0.003;s:82:"Robier\Enum\Test\Unit\ValidEnumTest::testItCanBeConvertedToString with data set #8";d:0.003;s:104:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenDuplicatedNameDefined with data set #0";d:0.025;s:104:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenDuplicatedNameDefined with data set #1";d:0.026;s:105:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenDuplicatedValueDefined with data set #0";d:0.001;s:105:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenDuplicatedValueDefined with data set #1";d:0;s:110:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumValueHasBadVariableType with data set #0";d:0;s:110:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumValueHasBadVariableType with data set #1";d:0;s:107:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenNoConstantsDefinedInEnum with data set #0";d:0;s:107:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenNoConstantsDefinedInEnum with data set #1";d:0;s:107:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenNoConstantsDefinedInEnum with data set #2";d:0;s:105:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenDuplicatedValueDefined with data set #2";d:0;s:110:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumValueHasBadVariableType with data set #2";d:0;s:95:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItTrowsExceptionWhenMultipleCharValueSetInCharEnum";d:0;s:95:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItTrowsExceptionWhenInvalidValueProvidedToCharEnum";d:0;s:72:"Robier\Enum\Test\Unit\MaskEnumTest::testItWillCreateValidMaskEnumeration";d:0.003;s:93:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfEnumProvided with data set #0";d:0.003;s:80:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnFalseIfNotEnumProvided";d:0.026;s:93:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfEnumProvided with data set #1";d:0.002;s:93:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfEnumProvided with data set #2";d:0.002;s:93:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfEnumProvided with data set #3";d:0.002;s:93:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfEnumProvided with data set #4";d:0.002;s:93:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfEnumProvided with data set #5";d:0.003;s:93:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfEnumProvided with data set #6";d:0.002;s:97:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnFalseIfNotEnumProvided with data set #0";d:0.003;s:97:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnFalseIfNotEnumProvided with data set #1";d:0.003;s:97:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnFalseIfNotEnumProvided with data set #2";d:0.003;s:93:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfEnumProvided with data set #7";d:0.003;s:91:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfClassHasAnHierarchyOfTraits";d:0.028;s:108:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfClassHasAnHierarchyOfTraits with data set #0";d:0.001;s:108:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfClassHasAnHierarchyOfTraits with data set #1";d:0.001;s:108:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfClassHasAnHierarchyOfTraits with data set #2";d:0.002;s:108:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfClassHasAnHierarchyOfTraits with data set #3";d:0.002;s:108:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #0";d:0.003;s:108:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #1";d:0.003;s:108:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #2";d:0.003;s:108:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #3";d:0.003;s:108:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #4";d:0.003;s:108:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #5";d:0.003;s:108:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #6";d:0.003;s:108:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #7";d:0.003;s:108:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #8";d:0.003;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidValueProvidedToFactoryMethod with data set #0";d:0.003;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidValueProvidedToFactoryMethod with data set #1";d:0.003;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidValueProvidedToFactoryMethod with data set #2";d:0.003;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidValueProvidedToFactoryMethod with data set #3";d:0.003;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidValueProvidedToFactoryMethod with data set #4";d:0.003;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidValueProvidedToFactoryMethod with data set #5";d:0.003;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidValueProvidedToFactoryMethod with data set #6";d:0.003;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidValueProvidedToFactoryMethod with data set #7";d:0.003;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidValueProvidedToFactoryMethod with data set #8";d:0.003;s:93:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfEnumProvided with data set #8";d:0.003;s:93:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfEnumProvided with data set #9";d:0.003;s:94:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfEnumProvided with data set #10";d:0.003;s:94:"Robier\Enum\Test\Unit\FunctionIsEnumTest::testItWillReturnTrueIfEnumProvided with data set #11";d:0.003;s:100:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnTrueIfEnumProvided with data set #0";d:0.003;s:100:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnTrueIfEnumProvided with data set #1";d:0.002;s:100:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnTrueIfEnumProvided with data set #2";d:0.003;s:100:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnTrueIfEnumProvided with data set #3";d:0.003;s:100:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnTrueIfEnumProvided with data set #4";d:0.003;s:100:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnTrueIfEnumProvided with data set #5";d:0.003;s:100:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnTrueIfEnumProvided with data set #6";d:0.003;s:100:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnTrueIfEnumProvided with data set #7";d:0.003;s:106:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnFalseIfEnumIsNotProvided with data set #0";d:0.003;s:106:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnFalseIfEnumIsNotProvided with data set #1";d:0.003;s:106:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnFalseIfEnumIsNotProvided with data set #2";d:0.003;s:95:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnTrueIfEnumProvided with data set #0";d:0;s:95:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnTrueIfEnumProvided with data set #1";d:0;s:95:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnTrueIfEnumProvided with data set #2";d:0;s:95:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnTrueIfEnumProvided with data set #3";d:0;s:95:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnTrueIfEnumProvided with data set #4";d:0;s:95:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnTrueIfEnumProvided with data set #5";d:0;s:95:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnTrueIfEnumProvided with data set #6";d:0;s:95:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnTrueIfEnumProvided with data set #7";d:0;s:95:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnTrueIfEnumProvided with data set #8";d:0;s:95:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnTrueIfEnumProvided with data set #9";d:0;s:96:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnTrueIfEnumProvided with data set #10";d:0;s:96:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnTrueIfEnumProvided with data set #11";d:0;s:101:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #0";d:0;s:101:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #1";d:0;s:101:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #2";d:0;s:100:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnTrueIfEnumProvided with data set #8";d:0.003;s:100:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnTrueIfEnumProvided with data set #9";d:0.003;s:101:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnTrueIfEnumProvided with data set #10";d:0.003;s:101:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnTrueIfEnumProvided with data set #11";d:0.003;s:101:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnTrueIfEnumProvided with data set #0";d:0.003;s:101:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnTrueIfEnumProvided with data set #1";d:0.002;s:101:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnTrueIfEnumProvided with data set #2";d:0.003;s:101:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnTrueIfEnumProvided with data set #3";d:0.003;s:101:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnTrueIfEnumProvided with data set #4";d:0.003;s:101:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnTrueIfEnumProvided with data set #5";d:0.003;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #0";d:0.003;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #1";d:0.003;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #2";d:0.003;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #3";d:0.003;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #4";d:0.003;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #5";d:0.003;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #6";d:0.003;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #7";d:0.003;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #8";d:0.003;s:102:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnTrueIfEnumProvided with data set #0";d:0.003;s:102:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnTrueIfEnumProvided with data set #1";d:0.002;s:108:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #0";d:0.003;s:108:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #1";d:0.003;s:108:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #2";d:0.003;s:108:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #3";d:0.003;s:108:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #4";d:0.003;s:108:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #5";d:0.003;s:108:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #6";d:0.003;s:108:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #7";d:0.003;s:108:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #8";d:0.003;s:108:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #9";d:0.003;s:109:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #10";d:0.004;s:109:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #11";d:0.004;s:109:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #12";d:0.004;s:99:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnTrueIfEnumProvided with data set #0";d:0.003;s:99:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnTrueIfEnumProvided with data set #1";d:0.002;s:105:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #0";d:0.003;s:105:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #1";d:0.003;s:105:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #2";d:0.003;s:105:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #3";d:0.003;s:105:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #4";d:0.003;s:105:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #5";d:0.003;s:105:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #6";d:0.003;s:105:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #7";d:0.003;s:105:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #8";d:0.003;s:105:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #9";d:0.004;s:106:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #10";d:0.004;s:106:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #11";d:0.003;s:106:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #12";d:0.003;s:99:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnTrueIfEnumProvided with data set #0";d:0.003;s:99:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnTrueIfEnumProvided with data set #1";d:0.002;s:105:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #0";d:0.003;s:105:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #1";d:0.003;s:105:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #2";d:0.003;s:105:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #3";d:0.003;s:105:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #4";d:0.003;s:105:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #5";d:0.003;s:105:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #6";d:0.003;s:105:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #7";d:0.003;s:105:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #8";d:0.003;s:105:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #9";d:0.004;s:106:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #10";d:0.004;s:106:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #11";d:0.004;s:106:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfEnumIsNotProvided with data set #12";d:0.003;s:115:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #0";d:0;s:115:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #1";d:0;s:115:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #2";d:0;s:115:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #3";d:0;s:115:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #4";d:0;s:115:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #5";d:0;s:115:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #6";d:0;s:115:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #7";d:0;s:115:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #8";d:0;s:115:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #9";d:0;s:116:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #10";d:0;s:116:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #11";d:0;s:109:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnNullWhenInvalidEnumProvided with data set #0";d:0;s:109:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnNullWhenInvalidEnumProvided with data set #1";d:0;s:109:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnNullWhenInvalidEnumProvided with data set #2";d:0;s:103:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnTrueIfCharEnumProvided with data set #0";d:0;s:103:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnTrueIfCharEnumProvided with data set #1";d:0;s:132:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #0";d:0;s:132:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #1";d:0;s:132:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #2";d:0;s:132:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #3";d:0;s:132:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #4";d:0;s:132:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #5";d:0;s:132:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #6";d:0;s:132:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #7";d:0;s:132:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #8";d:0;s:132:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #9";d:0;s:133:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #10";d:0;s:133:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #11";d:0;s:133:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #12";d:0;s:109:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnTrueIfIntegerEnumProvided with data set #0";d:0;s:109:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnTrueIfIntegerEnumProvided with data set #1";d:0;s:136:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #0";d:0;s:136:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #1";d:0;s:136:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #2";d:0;s:136:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #3";d:0;s:136:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #4";d:0;s:136:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #5";d:0;s:136:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #6";d:0;s:136:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #7";d:0;s:136:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #8";d:0;s:136:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #9";d:0;s:137:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #10";d:0;s:137:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #11";d:0;s:137:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #12";d:0;s:103:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnTrueIfMaskEnumProvided with data set #0";d:0;s:103:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnTrueIfMaskEnumProvided with data set #1";d:0;s:130:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #0";d:0;s:130:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #1";d:0;s:130:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #2";d:0;s:130:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #3";d:0;s:130:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #4";d:0;s:130:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #5";d:0;s:130:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #6";d:0;s:130:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #7";d:0;s:130:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #8";d:0;s:130:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #9";d:0;s:131:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #10";d:0;s:131:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #11";d:0;s:131:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #12";d:0;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnTrueIfStringEnumProvided with data set #0";d:0;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnTrueIfStringEnumProvided with data set #1";d:0;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnTrueIfStringEnumProvided with data set #2";d:0;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnTrueIfStringEnumProvided with data set #3";d:0;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnTrueIfStringEnumProvided with data set #4";d:0;s:107:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnTrueIfStringEnumProvided with data set #5";d:0;s:134:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #0";d:0;s:134:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #1";d:0;s:134:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #2";d:0;s:134:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #3";d:0;s:134:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #4";d:0;s:134:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #5";d:0;s:134:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #6";d:0;s:134:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #7";d:0;s:134:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #8";d:0;s:95:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #0";d:0;s:95:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #1";d:0;s:95:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #2";d:0;s:95:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #3";d:0;s:95:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #4";d:0;s:95:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #5";d:0;s:95:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #6";d:0;s:95:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #7";d:0;s:95:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #8";d:0;s:99:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #0";d:0;s:99:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #1";d:0;s:99:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #2";d:0;s:99:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #3";d:0;s:99:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #4";d:0;s:99:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #5";d:0;s:99:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #6";d:0;s:99:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #7";d:0;s:99:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #8";d:0;s:101:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #0";d:0;s:101:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #1";d:0;s:101:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #2";d:0;s:101:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #3";d:0;s:101:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #4";d:0;s:101:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #5";d:0;s:101:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #6";d:0;s:101:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #7";d:0;s:101:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #8";d:0;s:98:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItReturnsFalseWhenEnumIsUnSerialized with data set #0";d:0.008;s:98:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItReturnsFalseWhenEnumIsUnSerialized with data set #1";d:0.008;s:98:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItReturnsFalseWhenEnumIsUnSerialized with data set #2";d:0.008;s:98:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItReturnsFalseWhenEnumIsUnSerialized with data set #3";d:0.007;s:98:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItReturnsFalseWhenEnumIsUnSerialized with data set #4";d:0.008;s:98:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItReturnsFalseWhenEnumIsUnSerialized with data set #5";d:0.008;s:98:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItReturnsFalseWhenEnumIsUnSerialized with data set #6";d:0.008;s:98:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItReturnsFalseWhenEnumIsUnSerialized with data set #7";d:0.008;s:98:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItReturnsFalseWhenEnumIsUnSerialized with data set #8";d:0.008;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #0";d:0.003;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #1";d:0.003;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #2";d:0.003;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #3";d:0.003;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #4";d:0.003;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #5";d:0.003;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #6";d:0.003;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #7";d:0.003;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #8";d:0.003;s:95:"Robier\Enum\Test\Unit\ValidEnumTest::testItReturnsAlwaysSameEnumObjectInstance with data set #0";d:0.003;s:95:"Robier\Enum\Test\Unit\ValidEnumTest::testItReturnsAlwaysSameEnumObjectInstance with data set #1";d:0.003;s:95:"Robier\Enum\Test\Unit\ValidEnumTest::testItReturnsAlwaysSameEnumObjectInstance with data set #2";d:0.003;s:95:"Robier\Enum\Test\Unit\ValidEnumTest::testItReturnsAlwaysSameEnumObjectInstance with data set #3";d:0.003;s:95:"Robier\Enum\Test\Unit\ValidEnumTest::testItReturnsAlwaysSameEnumObjectInstance with data set #4";d:0.003;s:95:"Robier\Enum\Test\Unit\ValidEnumTest::testItReturnsAlwaysSameEnumObjectInstance with data set #5";d:0.003;s:95:"Robier\Enum\Test\Unit\ValidEnumTest::testItReturnsAlwaysSameEnumObjectInstance with data set #6";d:0.003;s:95:"Robier\Enum\Test\Unit\ValidEnumTest::testItReturnsAlwaysSameEnumObjectInstance with data set #7";d:0.003;s:95:"Robier\Enum\Test\Unit\ValidEnumTest::testItReturnsAlwaysSameEnumObjectInstance with data set #8";d:0.003;s:95:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #9";d:0;s:96:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #10";d:0;s:96:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #11";d:0;s:99:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #9";d:0;s:100:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #10";d:0;s:100:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #11";d:0;s:98:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItReturnsFalseWhenEnumIsUnSerialized with data set #9";d:0.008;s:99:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItReturnsFalseWhenEnumIsUnSerialized with data set #10";d:0.008;s:99:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItReturnsFalseWhenEnumIsUnSerialized with data set #11";d:0.008;s:108:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #9";d:0.003;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #10";d:0.003;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #11";d:0.003;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidValueProvidedToFactoryMethod with data set #9";d:0.003;s:110:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidValueProvidedToFactoryMethod with data set #10";d:0.003;s:110:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidValueProvidedToFactoryMethod with data set #11";d:0.003;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #9";d:0.003;s:110:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #10";d:0.003;s:110:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #11";d:0.003;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #9";d:0.003;s:78:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #10";d:0.003;s:78:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #11";d:0.003;s:66:"Robier\Enum\Test\Unit\ValidEnumTest::testCheckers with data set #9";d:0.003;s:67:"Robier\Enum\Test\Unit\ValidEnumTest::testCheckers with data set #10";d:0.003;s:67:"Robier\Enum\Test\Unit\ValidEnumTest::testCheckers with data set #11";d:0.003;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllValues with data set #3";d:0.003;s:73:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllNames with data set #3";d:0.004;s:80:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllEnumerations with data set #3";d:0.003;s:81:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingSomeEnumerations with data set #3";d:0.003;s:77:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualPassingCheck with data set #9";d:0.003;s:78:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualPassingCheck with data set #10";d:0.003;s:78:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualPassingCheck with data set #11";d:0.003;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testSameInstance with data set #9";d:0.003;s:71:"Robier\Enum\Test\Unit\ValidEnumTest::testSameInstance with data set #10";d:0.003;s:71:"Robier\Enum\Test\Unit\ValidEnumTest::testSameInstance with data set #11";d:0.003;s:80:"Robier\Enum\Test\Unit\ValidEnumTest::testIsEqualNotPassingCheck with data set #3";d:0.003;s:82:"Robier\Enum\Test\Unit\ValidEnumTest::testItCanBeConvertedToString with data set #9";d:0.003;s:83:"Robier\Enum\Test\Unit\ValidEnumTest::testItCanBeConvertedToString with data set #10";d:0.003;s:83:"Robier\Enum\Test\Unit\ValidEnumTest::testItCanBeConvertedToString with data set #11";d:0.003;s:76:"Robier\Enum\Test\Unit\ValidEnumTest::testIsAnyMethodPassing with data set #3";d:0.003;s:79:"Robier\Enum\Test\Unit\ValidEnumTest::testIsAnyMethodNotPassing with data set #3";d:0.003;s:70:"Robier\Enum\Test\Unit\ValidEnumTest::testRandomMethod with data set #3";d:0.003;s:95:"Robier\Enum\Test\Unit\ValidEnumTest::testItReturnsAlwaysSameEnumObjectInstance with data set #9";d:0.003;s:96:"Robier\Enum\Test\Unit\ValidEnumTest::testItReturnsAlwaysSameEnumObjectInstance with data set #10";d:0.003;s:96:"Robier\Enum\Test\Unit\ValidEnumTest::testItReturnsAlwaysSameEnumObjectInstance with data set #11";d:0.003;s:103:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenInvalidIndexProvided with data set #0";d:0;s:103:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenInvalidIndexProvided with data set #1";d:0;s:103:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenInvalidIndexProvided with data set #2";d:0;s:103:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenInvalidIndexProvided with data set #3";d:0;s:103:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenInvalidIndexProvided with data set #4";d:0;s:103:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenInvalidIndexProvided with data set #5";d:0;s:103:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenInvalidIndexProvided with data set #6";d:0;s:103:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenInvalidIndexProvided with data set #7";d:0;s:103:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenInvalidIndexProvided with data set #8";d:0;s:85:"Robier\Enum\Test\Unit\MaskEnumTest::testItWillCreateMaskEnumerationWhenValuesProvided";d:0.004;s:84:"Robier\Enum\Test\Unit\MaskEnumTest::testItWillCreateMaskEnumerationWhenNamesProvided";d:0.003;s:86:"Robier\Enum\Test\Unit\MaskEnumTest::testItWillCreateMaskEnumerationWhenIndicesProvided";d:0.003;s:89:"Robier\Enum\Test\Unit\MaskEnumTest::testItWillCreateMaskEnumerationWhenRandomMethodCalled";d:0.003;s:86:"Robier\Enum\Test\Unit\MaskEnumTest::testItWillCreateMaskEnumerationContainingAllValues";d:0.003;s:96:"Robier\Enum\Test\Unit\MaskEnumTest::testItWillReturnFalseIfMaskEnumerationDoesNotContainAnyValue";d:0.003;s:96:"Robier\Enum\Test\Unit\MaskEnumTest::testItWillCreateMaskEnumerationContainingAllValuesExceptSome";d:0.003;s:100:"Robier\Enum\Test\Unit\MaskEnumTest::testItWillCreateMaskEnumerationWhenRandomMethodCalledExceptValue";d:0.003;s:79:"Robier\Enum\Test\Unit\MaskEnumTest::testItWillNotFindAnyMatchingMaskEnumeration";d:0.003;s:67:"Robier\Enum\Test\Unit\MaskEnumTest::testTwoMaskEnumerationsAreEqual";d:0.003;s:70:"Robier\Enum\Test\Unit\MaskEnumTest::testTwoMaskEnumerationsAreNotEqual";d:0.003;s:91:"Robier\Enum\Test\Unit\MaskEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod";d:0.008;s:96:"Robier\Enum\Test\Unit\MaskEnumTest::testItWillNotReturnEnumIfInvalidIndexProvidedToFactoryMethod";d:0.008;s:97:"Robier\Enum\Test\Unit\MaskEnumTest::testItWillThrowExceptionOnInvalidIndexProvidedToFactoryMethod";d:0.008;s:96:"Robier\Enum\Test\Unit\MaskEnumTest::testItWillThrowExceptionOnInvalidNameProvidedToFactoryMethod";d:0.008;s:67:"Robier\Enum\Test\Unit\MaskEnumTest::testEnumerationProvidesAllNames";d:0.003;s:68:"Robier\Enum\Test\Unit\MaskEnumTest::testEnumerationProvidesAllValues";d:0.003;s:107:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenNoConstantsDefinedInEnum with data set #3";d:0;s:105:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenDuplicatedValueDefined with data set #3";d:0;s:114:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedInstanceMethodIsCalled with data set #6";d:0;s:114:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedInstanceMethodIsCalled with data set #7";d:0;s:111:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedClassMethodIsCalled with data set #3";d:0;s:117:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedNameProvidedToNameFactory with data set #3";d:0;s:101:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #9";d:0;s:102:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #10";d:0;s:102:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #11";d:0;s:103:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenInvalidIndexProvided with data set #9";d:0;s:104:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenInvalidIndexProvided with data set #10";d:0;s:104:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenInvalidIndexProvided with data set #11";d:0;s:110:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumValueHasBadVariableType with data set #3";d:0;s:96:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItTrowsExceptionWhenNegativeValueProvidedToMaskEnum";d:0;s:94:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItTrowsExceptionWhenTooBigValueProvidedToMaskEnum";d:0;s:78:"Robier\Enum\Test\Unit\NameTest::testGettingOriginal with data set "CAMEL_CASE"";d:0;s:79:"Robier\Enum\Test\Unit\NameTest::testGettingOriginal with data set "PASCAL_CASE"";d:0;s:84:"Robier\Enum\Test\Unit\NameTest::testGettingOriginal with data set "UPPER_SNAKE_CASE"";d:0;s:84:"Robier\Enum\Test\Unit\NameTest::testGettingOriginal with data set "LOWER_SNAKE_CASE"";d:0;s:84:"Robier\Enum\Test\Unit\NameTest::testGettingOriginal with data set "UPPER_KEBAB_CASE"";d:0;s:84:"Robier\Enum\Test\Unit\NameTest::testGettingOriginal with data set "LOWER_KEBAB_CASE"";d:0;s:84:"Robier\Enum\Test\Unit\NameTest::testGettingOriginal with data set "UPPER_SPACE_CASE"";d:0;s:84:"Robier\Enum\Test\Unit\NameTest::testGettingOriginal with data set "LOWER_SPACE_CASE"";d:0;s:83:"Robier\Enum\Test\Unit\NameTest::testGettingOriginal with data set "multiple spaces"";d:0;s:84:"Robier\Enum\Test\Unit\NameTest::testGettingOriginal with data set "multiple minuses"";d:0;s:88:"Robier\Enum\Test\Unit\NameTest::testGettingOriginal with data set "multiple underscores"";d:0;s:110:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenAllPossibilitiesAreExcluded with data set #0";d:0;s:110:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenAllPossibilitiesAreExcluded with data set #1";d:0;s:110:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenAllPossibilitiesAreExcluded with data set #2";d:0;s:110:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenAllPossibilitiesAreExcluded with data set #3";d:0;s:110:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenAllPossibilitiesAreExcluded with data set #4";d:0.001;s:110:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenAllPossibilitiesAreExcluded with data set #5";d:0;s:110:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenAllPossibilitiesAreExcluded with data set #6";d:0;s:110:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenAllPossibilitiesAreExcluded with data set #7";d:0;s:110:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenAllPossibilitiesAreExcluded with data set #8";d:0;s:110:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenAllPossibilitiesAreExcluded with data set #9";d:0;s:111:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenAllPossibilitiesAreExcluded with data set #10";d:0;s:111:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenAllPossibilitiesAreExcluded with data set #11";d:0;s:114:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedInstanceMethodIsCalled with data set #8";d:0;s:114:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedInstanceMethodIsCalled with data set #9";d:0;s:111:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedClassMethodIsCalled with data set #4";d:0;s:119:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedValueProvidedToValueFactory with data set #3";d:0;s:117:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenUndefinedNameProvidedToNameFactory with data set #4";d:0;s:105:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenDuplicatedValueDefined with data set #4";d:0;s:110:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumValueHasBadVariableType with data set #4";d:0;s:107:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenNoConstantsDefinedInEnum with data set #4";d:0;s:96:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #12";d:0;s:96:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #13";d:0;s:96:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsCloned with data set #14";d:0;s:111:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenAllPossibilitiesAreExcluded with data set #12";d:0;s:111:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenAllPossibilitiesAreExcluded with data set #13";d:0;s:111:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenAllPossibilitiesAreExcluded with data set #14";d:0;s:100:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #12";d:0;s:100:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #13";d:0;s:100:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsSerialized with data set #14";d:0;s:102:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #12";d:0;s:102:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #13";d:0;s:102:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenEnumIsUnSerialized with data set #14";d:0;s:104:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenInvalidIndexProvided with data set #12";d:0;s:104:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenInvalidIndexProvided with data set #13";d:0;s:104:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItThrowsExceptionWhenInvalidIndexProvided with data set #14";d:0;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #12";d:0.003;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #13";d:0.003;s:109:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidNameProvidedToFactoryMethod with data set #14";d:0.003;s:110:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #12";d:0.003;s:110:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #13";d:0.003;s:110:"Robier\Enum\Test\Unit\ValidEnumTest::testItWillReturnEnumIfValidIndexProvidedToFactoryMethod with data set #14";d:0.003;s:78:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #12";d:0.003;s:78:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #13";d:0.003;s:78:"Robier\Enum\Test\Unit\ValidEnumTest::testValidMagicFactories with data set #14";d:0.003;s:67:"Robier\Enum\Test\Unit\ValidEnumTest::testCheckers with data set #12";d:0.003;s:67:"Robier\Enum\Test\Unit\ValidEnumTest::testCheckers with data set #13";d:0.003;s:67:"Robier\Enum\Test\Unit\ValidEnumTest::testCheckers with data set #14";d:0.003;s:74:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllValues with data set #4";d:0.003;s:73:"Robier\Enum\Test\Unit\ValidEnumTest::testGettingAllNames with data set #4";d:0.004;s:102:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItTrowsExceptionWhenNegativeValueSetInUnsignedIntegerEnum";d:0;s:102:"Robier\Enum\Test\Unit\ExceptionEnumTest::testItTrowsExceptionWhenInvalidValueProvidedToUnsignedInteger";d:0;s:116:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #12";d:0;s:116:"Robier\Enum\Test\Unit\Functions\GetEnumTypeTest::testItWillReturnExpectedTypeWhenValidEnumProvided with data set #13";d:0;s:133:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #13";d:0;s:133:"Robier\Enum\Test\Unit\Functions\IsCharEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #14";d:0;s:96:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnTrueIfEnumProvided with data set #12";d:0;s:96:"Robier\Enum\Test\Unit\Functions\IsEnumTest::testItWillReturnTrueIfEnumProvided with data set #13";d:0;s:137:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #13";d:0;s:137:"Robier\Enum\Test\Unit\Functions\IsIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #14";d:0;s:131:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #13";d:0;s:131:"Robier\Enum\Test\Unit\Functions\IsMaskEnumTest::testItWillReturnFalseIfProvidedEnumIsNotMaskTypeOrItsNotEnumAtAll with data set #14";d:0;s:134:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #9";d:0;s:135:"Robier\Enum\Test\Unit\Functions\IsStringEnumTest::testItWillReturnFalseIfProvidedEnumIsNotStringTypeOrItsNotEnumAtAll with data set #10";d:0;s:117:"Robier\Enum\Test\Unit\Functions\IsUnsignedIntegerEnumTest::testItWillReturnTrueIfIntegerEnumProvided with data set #0";d:0;s:117:"Robier\Enum\Test\Unit\Functions\IsUnsignedIntegerEnumTest::testItWillReturnTrueIfIntegerEnumProvided with data set #1";d:0;s:144:"Robier\Enum\Test\Unit\Functions\IsUnsignedIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #0";d:0;s:144:"Robier\Enum\Test\Unit\Functions\IsUnsignedIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #1";d:0;s:144:"Robier\Enum\Test\Unit\Functions\IsUnsignedIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #2";d:0;s:144:"Robier\Enum\Test\Unit\Functions\IsUnsignedIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #3";d:0;s:144:"Robier\Enum\Test\Unit\Functions\IsUnsignedIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #4";d:0;s:144:"Robier\Enum\Test\Unit\Functions\IsUnsignedIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #5";d:0;s:144:"Robier\Enum\Test\Unit\Functions\IsUnsignedIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #6";d:0;s:144:"Robier\Enum\Test\Unit\Functions\IsUnsignedIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #7";d:0;s:144:"Robier\Enum\Test\Unit\Functions\IsUnsignedIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #8";d:0;s:144:"Robier\Enum\Test\Unit\Functions\IsUnsignedIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #9";d:0;s:145:"Robier\Enum\Test\Unit\Functions\IsUnsignedIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #10";d:0;s:145:"Robier\Enum\Test\Unit\Functions\IsUnsignedIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #11";d:0;s:145:"Robier\Enum\Test\Unit\Functions\IsUnsignedIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #12";d:0;s:145:"Robier\Enum\Test\Unit\Functions\IsUnsignedIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #13";d:0;s:145:"Robier\Enum\Test\Unit\Functions\IsUnsignedIntegerEnumTest::testItWillReturnFalseIfProvidedEnumIsNotIntegerTypeOrItsNotEnumAtAll with data set #14";d:0;}}}